import React, { useState, useEffect } from 'react';
import { StyleSheet, View, Text, Image, TouchableOpacity, Modal, FlatList, ImageBackground, TextInput, Button } from 'react-native';
import { useNavigation } from '@react-navigation/native';
import AsyncStorage from '@react-native-async-storage/async-storage'; 
import { auth } from './firebaseConfig'; // Asegúrate de importar la configuración de Firebase
import { onAuthStateChanged, updateProfile } from 'firebase/auth'; // Para obtener el usuario autenticado

export default function Perfil() {
  const navigation = useNavigation();
  const [selectedIcon, setSelectedIcon] = useState('user');
  const [profileIcon, setProfileIcon] = useState(require('./assets/user.jpg'));
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [userName, setUserName] = useState('');
  const [userEmail, setUserEmail] = useState('');
  const [newUserName, setNewUserName] = useState('');

  const iconOptions = [
    { id: 1, image: require('./assets/icon1.jpg') },
    { id: 2, image: require('./assets/icon2.jpg') },
    { id: 3, image: require('./assets/icon3.jpg') },
    { id: 4, image: require('./assets/jisung.jpg') },
  ];

  // Cargar el ícono de perfil guardado
  useEffect(() => {
    const loadProfileIcon = async () => {
      const storedIcon = await AsyncStorage.getItem('profileIcon');
      if (storedIcon) {
        setProfileIcon(JSON.parse(storedIcon)); // Convierte la cadena almacenada de nuevo a un objeto
      }
    };

    loadProfileIcon();
  }, []);

  // Obtener los datos del usuario autenticado
  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, (user) => {
      if (user) {
        setUserName(user.displayName || 'Usuario');
        setUserEmail(user.email);
      } else {
        navigation.navigate('InicioSesion'); // Redirige si no hay usuario autenticado
      }
    });

    return unsubscribe; // Limpiar el efecto cuando el componente se desmonte
  }, []);

  // Guardar la selección de ícono de perfil
  const handleIconChange = async (icon) => {
    setProfileIcon(icon);
    await AsyncStorage.setItem('profileIcon', JSON.stringify(icon)); // Almacena el ícono seleccionado
    setIsModalVisible(false);
  };

  // Actualizar el nombre de usuario en Firebase
  const handleUpdateUserName = async () => {
    const user = auth.currentUser;
    if (user) {
      try {
        await updateProfile(user, {
          displayName: newUserName,
        });
        setUserName(newUserName);
        setNewUserName(''); // Limpiar el campo de entrada
        alert('Nombre actualizado exitosamente');
      } catch (error) {
        console.error('Error al actualizar el nombre:', error);
        alert('Error al actualizar el nombre');
      }
    }
  };

  return (
    <ImageBackground
      source={require('./assets/perfil.png')}
      style={styles.background}
      resizeMode="cover"
    >
      <View style={styles.container}>
        <Text style={styles.title}>Perfil</Text>
        <View style={styles.whiteBox}>
          <Image source={profileIcon} style={styles.profileIcon} />
          <TouchableOpacity onPress={() => setIsModalVisible(true)}>
            <Text style={styles.changeIconText}>Cambiar icono</Text>
          </TouchableOpacity>
          <Text style={styles.name}>{userName}</Text>
          <Text style={styles.email}>{userEmail}</Text>

          <TextInput
            style={styles.input}
            placeholder="Nuevo nombre"
            value={newUserName}
            onChangeText={setNewUserName}
          />
          <Button title="Actualizar Nombre" onPress={handleUpdateUserName} />
        </View>

        <Modal visible={isModalVisible} transparent={true} animationType="slide">
          <View style={styles.modalContainer}>
            <View style={styles.modalContent}>
              <Text style={styles.modalTitle}>Selecciona un ícono</Text>
              <FlatList
                data={iconOptions}
                keyExtractor={(item) => item.id.toString()}
                renderItem={({ item }) => (
                  <TouchableOpacity onPress={() => handleIconChange(item.image)}>
                    <Image source={item.image} style={styles.iconOption} />
                  </TouchableOpacity>
                )}
              />
              <TouchableOpacity
                style={styles.closeButton}
                onPress={() => setIsModalVisible(false)}
              >
                <Text style={styles.closeButtonText}>Cerrar</Text>
              </TouchableOpacity>
            </View>
          </View>
        </Modal>

        <View style={styles.iconContainer}>
          <TouchableOpacity onPress={() => { setSelectedIcon('home'); navigation.navigate('menu'); }}>
            <View style={styles.iconWrapper}>
              <Image
                source={require('./assets/home.jpg')}
                style={[styles.icon, selectedIcon === 'home' && styles.selectedIcon]}
              />
              {selectedIcon === 'home' && <View style={styles.overlay} />}
            </View>
          </TouchableOpacity>

          <TouchableOpacity onPress={() => setSelectedIcon('user')}>
            <View style={styles.iconWrapper}>
              <Image
                source={require('./assets/user.jpg')}
                style={[styles.icon, selectedIcon === 'user' && styles.selectedIcon]}
              />
              {selectedIcon === 'user' && <View style={styles.overlay} />}
            </View>
          </TouchableOpacity>

          <TouchableOpacity onPress={() => { setSelectedIcon('notification'); navigation.navigate('anuncios'); }}>
            <View style={styles.iconWrapper}>
              <Image
                source={require('./assets/campana.jpg')}
                style={[styles.icon, selectedIcon === 'notification' && styles.selectedIcon]}
              />
              {selectedIcon === 'notification' && <View style={styles.overlay} />}
            </View>
          </TouchableOpacity>
        </View>
      </View>
    </ImageBackground>
  );
}

const styles = StyleSheet.create({
  background: {
    flex: 1,
  },
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  title: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#FFFFFF',
    marginTop: -50,
    marginBottom: 20,
  },
  whiteBox: {
    backgroundColor: '#FFFFFF',
    padding: 20,
    borderRadius: 10,
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 4,
    elevation: 3,
    marginBottom: 20,
    width: '90%',
  },
  profileIcon: {
    width: 100,
    height: 100,
    borderRadius: 50,
    marginBottom: 10,
  },
  changeIconText: {
    color: '#007BFF',
    fontSize: 16,
    marginBottom: 20,
  },
  name: {
    fontSize: 20,
    fontWeight: 'bold',
    marginBottom: 5,
  },
  email: {
    fontSize: 16,
    color: '#666',
  },
  input: {
    borderColor: '#ccc',
    borderWidth: 1,
    borderRadius: 5,
    padding: 10,
    marginTop: 10,
    marginBottom: 10,
    width: '100%',
  },
  iconContainer: {
    position: 'absolute',
    bottom: 5,
    flexDirection: 'row',
    justifyContent: 'space-around',
    width: '100%',
    paddingHorizontal: 20,
  },
  iconWrapper: {
    position: 'relative',
  },
  icon: {
    width: 40,
    height: 40,
  },
  overlay: {
    position: 'absolute',
    top: -5,
    left: -5,
    right: -5,
    bottom: -5,
    borderRadius: 50,
    backgroundColor: 'rgba(255, 0, 0, 0.4)',
  },
  modalContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
  },
  modalContent: {
    backgroundColor: '#FFF',
    padding: 20,
    borderRadius: 10,
    width: '80%',
    alignItems: 'center',
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    marginBottom: 20,
  },
  iconOption: {
    width: 50,
    height: 50,
    marginBottom: -10,
  },
  closeButton: {
    marginTop: 20,
    padding: 10,
    backgroundColor: '#ccc',
    borderRadius: 5,
  },
  closeButtonText: {
    fontSize: 16,
    fontWeight: 'bold',
  },
});
