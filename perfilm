import React, { useState, useEffect } from 'react';
import { StyleSheet, View, Text, Image, TouchableOpacity, Modal, FlatList, ImageBackground, TextInput } from 'react-native';
import { useNavigation } from '@react-navigation/native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { db } from './anunciosConfig'; // Asegúrate de que la ruta sea correcta
import { collection, addDoc, deleteDoc, onSnapshot, doc, getDoc, updateDoc } from 'firebase/firestore';

export default function Perfil() {
  const navigation = useNavigation();

  const [selectedIcon, setSelectedIcon] = useState('user');
  const [profileIcon, setProfileIcon] = useState(require('./assets/user.jpg'));
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [iconOptions] = useState([
    { id: 1, image: require('./assets/icon1.jpg') },
    { id: 2, image: require('./assets/icon2.jpg') },
    { id: 3, image: require('./assets/icon3.jpg') },
    { id: 4, image: require('./assets/jisung.jpg') },
  ]);
  
  const [items, setItems] = useState([]);
  const [newItem, setNewItem] = useState('');
  const [peopleCount, setPeopleCount] = useState(0);
  
  // Estado para el nombre y correo del usuario
  const [userName, setUserName] = useState('Nombre del usuario'); // Cambia esto para reflejar el nombre del usuario
  const [userEmail, setUserEmail] = useState('correo@ejemplo.com'); // Cambia esto para reflejar el correo del usuario
  
  const [isNameModalVisible, setIsNameModalVisible] = useState(false);
  const userId = 'user123'; // Cambia esto por el ID de usuario real

  useEffect(() => {
    const loadProfileIcon = async () => {
      const storedIcon = await AsyncStorage.getItem('profileIcon');
      if (storedIcon) {
        setProfileIcon(JSON.parse(storedIcon));
      }
    };

    const loadUserEmail = async () => {
      const email = await AsyncStorage.getItem('userEmail'); // Asegúrate de que el correo se guarde aquí después del inicio de sesión
      if (email) {
        setUserEmail(email);
      }
    };

    const unsubscribe = onSnapshot(collection(db, 'insumos'), (snapshot) => {
      const loadedItems = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      setItems(loadedItems);
    });

    loadProfileIcon();
    loadUserEmail(); // Carga el correo del usuario
    checkVoteCount();

    return () => unsubscribe(); // Limpieza al desmontar el componente
  }, []);

  const checkVoteCount = async () => {
    const docRef = doc(db, 'votaciones', userId);
    const docSnap = await getDoc(docRef);

    if (docSnap.exists()) {
      const data = docSnap.data();
      const currentDate = new Date().toISOString().split('T')[0];

      if (data.date.split('T')[0] !== currentDate) {
        setPeopleCount(0);
        await updateDoc(docRef, { hasVoted: false });
      } else if (data.vote === 'sí') {
        setPeopleCount(prevCount => prevCount + 1);
      }
    }
  };

  const handleIconChange = async (icon) => {
    setProfileIcon(icon);
    await AsyncStorage.setItem('profileIcon', JSON.stringify(icon));
    setIsModalVisible(false);
  };

  const handleAddItem = async () => {
    if (newItem.trim() !== '') {
      await addDoc(collection(db, 'insumos'), { name: newItem });
      setNewItem('');
    }
  };

  const handleDeleteItem = async (itemId) => {
    await deleteDoc(doc(db, 'insumos', itemId));
  };

  const handleChangeName = () => {
    // Actualiza el nombre del usuario
    setUserName(userName);
    setIsNameModalVisible(false);
  };

  const renderItem = ({ item }) => (
    <View style={styles.itemContainer}>
      <Text style={styles.itemText}>{item.name}</Text>
      <TouchableOpacity onPress={() => handleDeleteItem(item.id)}>
        <Text style={styles.deleteButton}>Eliminar</Text>
      </TouchableOpacity>
    </View>
  );

  return (
    <ImageBackground
      source={require('./assets/perfil.png')}
      style={styles.background}
      resizeMode="cover"
    >
      <View style={styles.container}>
        <Text style={styles.title}>Perfil</Text>
        <View style={styles.whiteBox}>
          <Image source={profileIcon} style={styles.profileIcon} />
          <TouchableOpacity onPress={() => setIsModalVisible(true)}>
            <Text style={styles.changeIconText}>Cambiar icono</Text>
          </TouchableOpacity>
          <Text style={styles.name}>{userName}</Text>
          <TouchableOpacity onPress={() => setIsNameModalVisible(true)}>
            <Text style={styles.changeNameText}>Cambiar nombre</Text>
          </TouchableOpacity>
          <Text style={styles.email}>{userEmail}</Text> {/* Mostrar el correo del usuario */}
        </View>

        <View style={styles.voteCountContainer}>
          <Text style={styles.peopleCountText}>
            Personas que dijeron SÍ: {peopleCount}
          </Text>
        </View>

        <View style={styles.insumosContainer}>
          <View style={styles.insumosBackground}>
            <FlatList
              data={items}
              renderItem={renderItem}
              keyExtractor={item => item.id}
              style={styles.list}
            />
          </View>
        </View>

        <TextInput
          style={styles.input}
          placeholder="Nuevo insumo"
          value={newItem}
          onChangeText={setNewItem}
        />

        <TouchableOpacity style={styles.addButton} onPress={handleAddItem}>
          <Text style={styles.addButtonText}>Agregar Insumo</Text>
        </TouchableOpacity>

        <Modal visible={isModalVisible} transparent={true} animationType="slide">
          <View style={styles.modalContainer}>
            <View style={styles.modalContent}>
              <Text style={styles.modalTitle}>Selecciona un ícono</Text>
              <FlatList
                data={iconOptions}
                keyExtractor={(item) => item.id.toString()}
                renderItem={({ item }) => (
                  <TouchableOpacity onPress={() => handleIconChange(item.image)}>
                    <Image source={item.image} style={styles.iconOption} />
                  </TouchableOpacity>
                )}
              />
              <TouchableOpacity
                style={styles.closeButton}
                onPress={() => setIsModalVisible(false)}
              >
                <Text style={styles.closeButtonText}>Cerrar</Text>
              </TouchableOpacity>
            </View>
          </View>
        </Modal>

        <Modal visible={isNameModalVisible} transparent={true} animationType="slide">
          <View style={styles.modalContainer}>
            <View style={styles.modalContent}>
              <Text style={styles.modalTitle}>Cambiar Nombre</Text>
              <TextInput
                style={styles.input}
                value={userName}
                onChangeText={setUserName}
              />
              <TouchableOpacity style={styles.saveButton} onPress={handleChangeName}>
                <Text style={styles.saveButtonText}>Guardar</Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={styles.closeButton}
                onPress={() => setIsNameModalVisible(false)}
              >
                <Text style={styles.closeButtonText}>Cerrar</Text>
              </TouchableOpacity>
            </View>
          </View>
        </Modal>

        <View style={styles.iconContainer}>
          <TouchableOpacity onPress={() => { setSelectedIcon('home'); navigation.navigate('menu2'); }}>
            <View style={styles.iconWrapper}>
              <Image
                source={require('./assets/home.jpg')}
                style={[styles.icon, selectedIcon === 'home' && styles.selectedIcon]}
              />
              {selectedIcon === 'home' && <View style={styles.overlay} />}
            </View>
          </TouchableOpacity>

          <TouchableOpacity onPress={() => { setSelectedIcon('user'); navigation.navigate('perfilm'); }}>
            <View style={styles.iconWrapper}>
              <Image
                source={require('./assets/user.jpg')}
                style={[styles.icon, selectedIcon === 'user' && styles.selectedIcon]}
              />
              {selectedIcon === 'user' && <View style={styles.overlay} />}
            </View>
          </TouchableOpacity>

          <TouchableOpacity onPress={() => { setSelectedIcon('notification'); navigation.navigate('anuncios2'); }}>
            <View style={styles.iconWrapper}>
              <Image
                source={require('./assets/campana.jpg')}
                style={[styles.icon, selectedIcon === 'notification' && styles.selectedIcon]}
              />
              {selectedIcon === 'notification' && <View style={styles.overlay} />}
            </View>
          </TouchableOpacity>
        </View>
      </View>
    </ImageBackground>
  );
}

const styles = StyleSheet.create({
  background: {
    flex: 1,
  },
  container: {
    flex: 1,
    alignItems: 'center',
    paddingTop: 40,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 20,
    color: '#FFFFFF',
  },
  whiteBox: {
    backgroundColor: 'rgba(255, 255, 255, 0.8)',
    borderRadius: 10,
    padding: 20,
    marginBottom: 20,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.2,
    shadowRadius: 4,
    elevation: 5,
    width: '90%',
  },
  profileIcon: {
    width: 100,
    height: 100,
    borderRadius: 50,
    marginBottom: 10,
  },
  changeIconText: {
    fontSize: 16,
    color: '#007BFF',
    marginBottom: 10,
  },
  name: {
    fontSize: 20,
    fontWeight: 'bold',
  },
  changeNameText: {
    fontSize: 16,
    color: '#007BFF',
    marginTop: 10,
    marginBottom: 5,
  },
  email: {
    fontSize: 16,
    color: '#666',
  },
  voteCountContainer: {
    marginVertical: 20,
  },
  peopleCountText: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#FFFFFF',
  },
  insumosContainer: {
    width: '100%',
  },
  insumosBackground: {
    backgroundColor: 'rgba(255, 255, 255, 0.8)',
    padding: 10,
    borderRadius: 10,
  },
  list: {
    marginBottom: 20,
  },
  itemContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    padding: 10,
    borderBottomWidth: 1,
    borderBottomColor: '#ccc',
  },
  itemText: {
    fontSize: 16,
  },
  deleteButton: {
    color: 'red',
  },
  addButton: {
    backgroundColor: '#007BFF',
    padding: 15,
    borderRadius: 5,
    alignItems: 'center',
    width: '90%',
    marginBottom: 20,
  },
  addButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: 'bold',
  },
  modalContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
  },
  modalContent: {
    backgroundColor: '#FFFFFF',
    padding: 20,
    borderRadius: 10,
    alignItems: 'center',
    width: '80%',
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 10,
  },
  iconOption: {
    width: 50,
    height: 50,
    margin: 10,
  },
  closeButton: {
    backgroundColor: '#ccc',
    padding: 10,
    borderRadius: 5,
    marginTop: 10,
  },
  closeButtonText: {
    color: '#000',
  },
  input: {
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: 5,
    padding: 10,
    marginBottom: 10,
    width: '100%',
  },
  saveButton: {
    backgroundColor: '#28A745',
    padding: 10,
    borderRadius: 5,
  },
  saveButtonText: {
    color: '#FFFFFF',
  },
  iconContainer: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    width: '100%',
    paddingBottom: 20,
    position: 'absolute',
    bottom: 0,
  },
  iconWrapper: {
    position: 'relative',
  },
  icon: {
    width: 50,
    height: 50,
  },
  selectedIcon: {
    opacity: 0.5,
  },
  overlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(255, 0, 0, 0.5)',
    borderRadius: 25,
  },
});
